Subject: [PATCH] Disable template copying
---
Index: flutter-elinux/lib/commands/create.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flutter-elinux/lib/commands/create.dart b/flutter-elinux/lib/commands/create.dart
--- a/flutter-elinux/lib/commands/create.dart	(revision cbc86f6e71e26f20e0f823549d81e1f3cf4a26ae)
+++ b/flutter-elinux/lib/commands/create.dart	(date 1741954232159)
@@ -149,68 +149,6 @@
       return super.runCommand();
     }
 
-    // The template directory that the flutter tools search for available
-    // templates cannot be overriden because the implementation is private.
-    // So we have to copy eLinux templates into the directory manually.
-    final Directory eLinuxTemplates = globals.fs
-        .directory(Cache.flutterRoot)
-        .parent
-        .childDirectory('templates');
-    if (!eLinuxTemplates.existsSync()) {
-      throwToolExit('Could not locate eLinux templates.');
-    }
-    final Directory templates = globals.fs
-        .directory(Cache.flutterRoot)
-        .childDirectory('packages')
-        .childDirectory('flutter_tools')
-        .childDirectory('templates');
-    _runGitClean(templates);
-
-    try {
-      for (final Directory projectType
-          in eLinuxTemplates.listSync().whereType<Directory>()) {
-        final Directory dest = templates
-            .childDirectory(projectType.basename)
-            .childDirectory('elinux.tmpl');
-        if (dest.existsSync()) {
-          dest.deleteSync(recursive: true);
-        }
-
-        copyDirectory(projectType, dest);
-        if (projectType.basename == 'app') {
-          final Directory sourceRunnerCommon =
-              projectType.childDirectory('runner');
-          if (!sourceRunnerCommon.existsSync()) {
-            continue;
-          }
-          final Directory sourceFlutter = projectType.childDirectory('flutter');
-          if (!sourceFlutter.existsSync()) {
-            continue;
-          }
-          copyDirectory(sourceFlutter, dest.childDirectory('flutter'));
-          copyDirectory(sourceRunnerCommon, dest.childDirectory('runner'));
-        }
-      }
-      return await _runCommand();
-    } finally {
-      _runGitClean(templates);
-    }
-  }
-
-  void _runGitClean(Directory directory) {
-    ProcessResult result = globals.processManager.runSync(
-      <String>['git', 'restore', '.'],
-      workingDirectory: directory.path,
-    );
-    if (result.exitCode != 0) {
-      throwToolExit('Failed to run git restore: ${result.stderr}');
-    }
-    result = globals.processManager.runSync(
-      <String>['git', 'clean', '-df', '.'],
-      workingDirectory: directory.path,
-    );
-    if (result.exitCode != 0) {
-      throwToolExit('Failed to run git clean: ${result.stderr}');
-    }
+    return _runCommand();
   }
 }
